{"version":3,"file":"emot.js","sources":["../src/main.js"],"sourcesContent":["import styles from './main.css'\n\nfunction createElement(name, className) {\n  const dom = document.createElement(name)\n  if (className) dom.className = className\n  return dom\n}\n\nfunction isDocument(el) {\n  return el.nodeType === 1 ? el : document.querySelector(el)\n}\n\nexport default class Emot {\n  #options\n  #output\n  #emotAll\n  constructor(options) {\n    this.#injectStyle()\n    this.#options = options\n    this.#options.el = isDocument(options.el)\n    this.#options.target = isDocument(options.target)\n    this.#options.before = this.#options.before || '['\n    this.#options.after = this.#options.after || ']'\n    this.#output = { content: '', contentHTML: '' }\n    this.#emotAll = {}\n    this.#request(this.#options.emotMaps)\n  }\n  get() {\n    return this.#output\n  }\n\n  #init() {\n    const self = this\n\n    // 将所有的表情合并成一个\n    for (const e in self.#options.emotMaps) {\n      const type = self.#options.emotMaps[e].type\n      if (type === 'text') continue\n      const items = self.#options.emotMaps[e].items\n      self.#emotAll = Object.assign(self.#emotAll, items)\n    }\n\n    self.#createDOM()\n\n    // 监听目标(textarea)输入\n    self.#options.target.oninput = function () {\n      self.#output.content = this.value\n      self.#parseEmot()\n    }\n  }\n\n  // eslint-disable-next-line max-statements\n  #createDOM() {\n    const self = this\n    const root = self.#options.el\n    root.classList.add('emot')\n    const emotMaps = self.#options.emotMaps\n\n    const packages = createElement('div', 'emot-packages')\n    for (const emotKey in emotMaps) {\n      const emotValue = emotMaps[emotKey]\n      const ul = createElement('ul', 'emot-items')\n      ul.emotKey = emotKey\n      root.appendChild(ul)\n      // 表情选项卡分类\n      for (const iKey in emotValue.items) {\n        const iValue = emotValue.items[iKey]\n        const li = createElement('li', 'emot-item')\n        ul.appendChild(li)\n        li.onclick = function () {\n          // 获取输入框光标位置\n          let cursorStart = self.#options.target.selectionStart\n          let cursorEnd = self.#options.target.selectionEnd\n          const ctx = self.#output.content\n          const Start = ctx.substring(0, cursorStart)\n          const Ent = ctx.substring(cursorEnd)\n          if (emotValue.type === 'text') self.#output.content = Start + iValue + Ent\n          else self.#output.content = Start + self.#options.before + iKey + self.#options.after + Ent\n          self.#options.target.focus()\n          self.#options.target.value = self.#output.content\n          // 将光标指定到插入内容的后面\n          self.#options.target.selectionEnd = Ent ? self.#output.content.indexOf(Ent) : self.#output.content.length\n          // 重新解析表情\n          self.#parseEmot()\n        }\n\n        // 如果是问本类型这创建span，反之创建img\n        if (emotValue.type === 'text') {\n          const span = createElement('span')\n          span.title = iKey\n          span.textContent = iValue\n          li.appendChild(span)\n        } else {\n          const img = createElement('img')\n          img.src = iValue\n          img.title = img.alt = iKey\n          li.appendChild(img)\n        }\n      }\n\n      // 创建表情包选项卡\n      const pkgSpan = createElement('span')\n      pkgSpan.innerHTML = emotKey\n      pkgSpan.onclick = function () {\n        // 当点击表情选项卡时，清空所有表情选项卡的class属性\n        packages.childNodes.forEach((node) => {\n          node.className = ''\n        })\n        // 为当前点击的表情选项卡添加class属性\n        pkgSpan.className = 'emot-package-active'\n\n        // 选中的表情列表\n        root.querySelectorAll('.emot-items').forEach((node) => {\n          node.classList.remove('emot-items-active')\n          if (node.emotKey === emotKey) {\n            node.classList.add('emot-items-active')\n          }\n        })\n      }\n      packages.appendChild(pkgSpan)\n    }\n\n    // 默认选择第一个表情包选项卡\n    root.childNodes[0].classList.add('emot-items-active')\n    packages.childNodes[0].classList.add('emot-package-active')\n\n    root.appendChild(packages)\n  }\n\n  #parseEmot() {\n    const before = this.#options.before\n    const after = this.#options.after\n    let ctx = this.#output.content\n    const emots = []\n    // 匹配所有[]格式的内容，并存储到emots数组中\n    const reg = new RegExp('\\\\' + before + '(.*?)' + '\\\\' + after, 'g')\n    ctx.replace(reg, ($0, $1) => {\n      emots.push($1)\n    })\n\n    // 遍历匹配到的所有[]格式的表情\n    for (const emot of emots) {\n      // 匹配是否包含在指定的表情当中\n      // 不包含直接直接进入下次循环\n      const link = this.#emotAll[emot]\n      if (!link) continue\n      const img = '<img src=' + link + ' alt=' + emot + '/>'\n      ctx = ctx.replace(before + emot + after, img)\n    }\n    this.#output.contentHTML = ctx\n  }\n\n  #injectStyle() {\n    const style = createElement('style')\n    style.textContent = styles\n    document.head.appendChild(style)\n  }\n\n  #request(emotMaps) {\n    // 判断是否是.json结尾，如果是则发送请求\n    if (!/\\.json$/.test(emotMaps)) return this.#init()\n    try {\n      fetch(emotMaps)\n        .then((res) => res.json())\n        .then((res) => {\n          this.#options.emotMaps = res\n          this.#init()\n        })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Emotion request failure:', JSON.stringify(e))\n    }\n  }\n}\n"],"names":["createElement","name","className","dom","document","isDocument","el","nodeType","querySelector","_init2","self","this","e","_classPrivateFieldGet","_options","emotMaps","type","items","_classPrivateFieldSet","Object","assign","_emotAll","_classPrivateMethodGet","_createDOM","_createDOM2","target","oninput","_output","content","value","_parseEmot","_parseEmot2","call","root","classList","add","packages","_loop","emotKey","emotValue","ul","appendChild","_loop2","iKey","iValue","li","onclick","cursorStart","selectionStart","cursorEnd","selectionEnd","ctx","Start","substring","Ent","before","after","focus","indexOf","length","span","title","textContent","img","src","alt","pkgSpan","innerHTML","childNodes","forEach","node","querySelectorAll","remove","emots","reg","RegExp","replace","$0","$1","push","_i","_emots","emot","link","contentHTML","_injectStyle2","style","head","_this","test","_init","fetch","then","res","json","console","error","JSON","stringify","Emot","options","_classCallCheck","_classPrivateMethodInitSpec","_request","_injectStyle","_classPrivateFieldInitSpec","writable","_request2"],"mappings":"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"}