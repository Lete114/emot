{"version":3,"file":"emot.js","sources":["../src/main.js"],"sourcesContent":["import styles from './main.css'\n\nfunction createElement(name, className) {\n  const dom = document.createElement(name)\n  if (className) dom.className = className\n  return dom\n}\n\nexport default class Emot {\n  #options\n  #output\n  #emotAll\n  constructor(options) {\n    this.#injectStyle()\n    this.#options = options\n    this.#options.el = document.querySelector(options.el)\n    this.#options.target = document.querySelector(options.target)\n    this.#options.before = this.#options.before || '['\n    this.#options.after = this.#options.after || ']'\n    this.#output = { content: '', contentHTML: '' }\n    this.#emotAll = {}\n    this.#request(this.#options.emotMaps)\n  }\n  get() {\n    return this.#output\n  }\n\n  #init() {\n    const self = this\n\n    // 将所有的表情合并成一个\n    for (const e in self.#options.emotMaps) {\n      const type = self.#options.emotMaps[e].type\n      if (type === 'text') continue\n      const items = self.#options.emotMaps[e].items\n      self.#emotAll = Object.assign(self.#emotAll, items)\n    }\n\n    self.#createDOM()\n\n    // 监听目标(textarea)输入\n    self.#options.target.oninput = function () {\n      self.#output.content = this.value\n      self.#parseEmot()\n    }\n  }\n\n  // eslint-disable-next-line max-statements\n  #createDOM() {\n    const self = this\n    const root = createElement('div', 'emot')\n    const emotMaps = self.#options.emotMaps\n\n    const packages = createElement('div', 'emot-packages')\n    for (const emotKey in emotMaps) {\n      const emotValue = emotMaps[emotKey]\n      const ul = createElement('ul', 'emot-items')\n      ul.emotKey = emotKey\n      root.appendChild(ul)\n      // 表情选项卡分类\n      for (const iKey in emotValue.items) {\n        const iValue = emotValue.items[iKey]\n        const li = createElement('li', 'emot-item')\n        ul.appendChild(li)\n        li.onclick = function () {\n          // 获取输入框光标位置\n          let cursorStart = self.#options.target.selectionStart\n          let cursorEnd = self.#options.target.selectionEnd\n          const ctx = self.#output.content\n          const Start = ctx.substring(0, cursorStart)\n          const Ent = ctx.substring(cursorEnd)\n          if (emotValue.type === 'text') self.#output.content = Start + iValue + Ent\n          else self.#output.content = Start + self.#options.before + iKey + self.#options.after + Ent\n          self.#options.target.focus()\n          self.#options.target.value = self.#output.content\n          // 将光标指定到插入内容的后面\n          self.#options.target.selectionEnd = Ent ? self.#output.content.indexOf(Ent) : self.#output.content.length\n          // 重新解析表情\n          self.#parseEmot()\n        }\n\n        // 如果是问本类型这创建span，反之创建img\n        if (emotValue.type === 'text') {\n          const span = createElement('span')\n          span.title = iKey\n          span.textContent = iValue\n          li.appendChild(span)\n        } else {\n          const img = createElement('img')\n          img.src = iValue\n          img.title = img.alt = iKey\n          li.appendChild(img)\n        }\n      }\n\n      // 创建表情包选项卡\n      const pkgSpan = createElement('span')\n      pkgSpan.innerHTML = emotKey\n      pkgSpan.onclick = function () {\n        // 当点击表情选项卡时，清空所有表情选项卡的class属性\n        packages.childNodes.forEach((node) => {\n          node.className = ''\n        })\n        // 为当前点击的表情选项卡添加class属性\n        pkgSpan.className = 'emot-package-active'\n\n        // 选中的表情列表\n        root.querySelectorAll('.emot-items').forEach((node) => {\n          node.classList.remove('emot-items-active')\n          if (node.emotKey === emotKey) {\n            node.classList.add('emot-items-active')\n          }\n        })\n      }\n      packages.appendChild(pkgSpan)\n    }\n\n    // 默认选择第一个表情包选项卡\n    root.childNodes[0].classList.add('emot-items-active')\n    packages.childNodes[0].classList.add('emot-package-active')\n\n    root.appendChild(packages)\n    self.#options.el.appendChild(root)\n  }\n\n  #parseEmot() {\n    const before = this.#options.before\n    const after = this.#options.after\n    let ctx = this.#output.content\n    const emots = []\n    // 匹配所有[]格式的内容，并存储到emots数组中\n    const reg = new RegExp('\\\\' + before + '(.*?)' + '\\\\' + after, 'g')\n    ctx.replace(reg, ($0, $1) => {\n      emots.push($1)\n    })\n\n    // 遍历匹配到的所有[]格式的表情\n    for (const emot of emots) {\n      // 匹配是否包含在指定的表情当中\n      // 不包含直接直接进入下次循环\n      const link = this.#emotAll[emot]\n      if (!link) continue\n      const img = '<img src=' + link + ' alt=' + emot + '/>'\n      ctx = ctx.replace(before + emot + after, img)\n    }\n    this.#output.contentHTML = ctx\n  }\n\n  #injectStyle() {\n    const style = createElement('style')\n    style.textContent = styles\n    document.head.appendChild(style)\n  }\n\n  #request(emotMaps) {\n    // 判断是否是.json结尾，如果是则发送请求\n    if (!/\\.json$/.test(emotMaps)) return this.#init()\n    try {\n      fetch(emotMaps)\n        .then((res) => res.json())\n        .then((res) => {\n          this.#options.emotMaps = res\n          this.#init()\n        })\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Emotion request failure:', JSON.stringify(e))\n    }\n  }\n}\n"],"names":["createElement","name","className","dom","document","_init2","self","this","e","_classPrivateFieldGet","_options","emotMaps","type","items","_classPrivateFieldSet","Object","assign","_emotAll","_classPrivateMethodGet","_createDOM","_createDOM2","target","oninput","_output","content","value","_parseEmot","_parseEmot2","call","root","packages","_loop","emotKey","emotValue","ul","appendChild","_loop2","iKey","iValue","li","onclick","cursorStart","selectionStart","cursorEnd","selectionEnd","ctx","Start","substring","Ent","before","after","focus","indexOf","length","span","title","textContent","img","src","alt","pkgSpan","innerHTML","childNodes","forEach","node","querySelectorAll","classList","remove","add","el","emots","reg","RegExp","replace","$0","$1","push","_i","_emots","emot","link","contentHTML","_injectStyle2","style","head","_this","test","_init","fetch","then","res","json","console","error","JSON","stringify","Emot","options","_classCallCheck","_classPrivateMethodInitSpec","_request","_injectStyle","_classPrivateFieldInitSpec","writable","querySelector","_request2"],"mappings":"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"}